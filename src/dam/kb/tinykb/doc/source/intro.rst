Introduction
============

TinyKB is a Python module for implementing and managing *knowledge
bases* composed by *classes* and *objects* (i.e. class instances)
containing both scalar and vectorial *attributes* (and possibly
cross-references).

TinyKB classes are similar to those offered by object-oriented
programming languages: they are defined with a set of strongly-typed
attributes, and they support single inheritance; furthermore, they can
be used to dinamically generate Python classes, which in turn can
instantiate Python objects.  Both classes and objects are
automatically mapped to a SQL data base.

TinyKB tries to leverage the full power of the SQL language and DBMSs,
avoiding the typical "key/value" approach usually adopted when the
data schema is unknown until run-time (i.e. when dealing with
"unstructured" data).  TinyKB reflects class definitions in the
underlying, autogenerated SQL DB schema: classes and attributes are
mapped to dedicated tables and columns, class hierarchies and
cross-references are implemented with referential constraints.  Object
attribute types and constraints are enforced using DBMS checks.  This
approach brings three advantages:

    1. the SQL representation of the KB is clean, data-centric and
       application-agnostic;

    2. the SQL DBMS becomes an additional safety layer
       ensuring data integrity;

    3. the knowledge base can be explored and collected with the full
       power of SQL queries, avoiding excessive ``JOIN`` usage.

TinyKB provides a developer-friendly API which hides most of the
underlying machinery.  Under the hood, Python metaprogramming and
other run-time features are used to dynamically generate modules and
classes, thus offering a transparent mapping to the underlying
knowledge base.
