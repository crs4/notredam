{"majorversion": 2, "filemap": {"ImageContainer.js": {"classlist": ["WireIt.ImageContainer"], "name": "ImageContainer.js", "module": "WireIt"}, "FormContainer-beta.js": {"classlist": ["WireIt.FormContainer"], "name": "FormContainer-beta.js", "module": "WireIt"}, "Wire.js": {"classlist": ["WireIt.Wire"], "name": "Wire.js", "module": "WireIt"}, "Layout.js": {"classlist": [], "name": "Layout.js", "module": "WireIt"}, "Layer.js": {"classlist": ["WireIt.Layer"], "name": "Layer.js", "module": "WireIt"}, "gears.js": {"classlist": [], "name": "gears.js", "module": "WireIt"}, "Container.js": {"classlist": ["WireIt.Container"], "name": "Container.js", "module": "WireIt"}, "LayerMap.js": {"classlist": ["WireIt.LayerMap"], "name": "LayerMap.js", "module": "WireIt"}, "DD.js": {"classlist": ["WireIt.util.DD"], "name": "DD.js", "module": "WireIt"}, "WirableField-beta.js": {"classlist": ["inputEx.BaseField", "inputEx.Field"], "name": "WirableField-beta.js", "module": "WireIt"}, "Terminal.js": {"classlist": ["WireIt.Scissors", "WireIt.TerminalProxy", "WireIt.Terminal", "WireIt.util.TerminalInput", "WireIt.util.TerminalOutput"], "name": "Terminal.js", "module": "WireIt"}, "Anim.js": {"classlist": ["WireIt.util.Anim"], "name": "Anim.js", "module": "WireIt"}, "ajax.js": {"classlist": [], "name": "ajax.js", "module": "WireIt"}, "WiringEditor.js": {"classlist": ["WireIt.ModuleProxy", "WireIt.WiringEditor"], "name": "WiringEditor.js", "module": "WireIt"}, "DDResize.js": {"classlist": ["WireIt.util.DDResize"], "name": "DDResize.js", "module": "WireIt"}, "WireIt.js": {"classlist": ["WireIt.WireIt"], "name": "WireIt.js", "module": "WireIt"}, "json-rpc.js": {"classlist": [], "name": "json-rpc.js", "module": "WireIt"}, "InOutContainer.js": {"classlist": ["WireIt.InOutContainer"], "name": "InOutContainer.js", "module": "WireIt"}, "CanvasElement.js": {"classlist": ["WireIt.CanvasElement"], "name": "CanvasElement.js", "module": "WireIt"}}, "modules": {"WireIt": {"description": "WireIt provide classes to build wirable interfaces", "submodules": [], "classlist": ["WireIt.CanvasElement", "WireIt.Container", "WireIt.ImageContainer", "WireIt.InOutContainer", "WireIt.Layer", "WireIt.LayerMap", "WireIt.Scissors", "WireIt.TerminalProxy", "WireIt.Terminal", "WireIt.util.TerminalInput", "WireIt.util.TerminalOutput", "WireIt.Wire", "WireIt.WireIt", "WireIt.ModuleProxy", "WireIt.WiringEditor", "WireIt.util.Anim", "WireIt.util.DD", "WireIt.util.DDResize", "WireIt.FormContainer", "inputEx.BaseField", "inputEx.Field"], "filelist": ["CanvasElement.js", "Container.js", "ImageContainer.js", "InOutContainer.js", "Layer.js", "LayerMap.js", "Layout.js", "Terminal.js", "Wire.js", "WireIt.js", "WiringEditor.js", "ajax.js", "gears.js", "json-rpc.js", "Anim.js", "DD.js", "DDResize.js", "FormContainer-beta.js", "WirableField-beta.js"], "subdata": {}, "name": "WireIt"}}, "classmap": {"WireIt.Container": {"name": "WireIt.Container", "constructors": [{"params": [{"type": "Object", "name": "options", "description": "      Configuration object (see options property)"}, {"type": "WireIt.Layer", "name": "layer", "description": " The WireIt.Layer (or subclass) instance that contains this container"}], "description": "Visual module that contains terminals. The wires are updated when the module is dragged around."}], "namespace": "WireIt", "module": "WireIt", "events": {"eventRemoveWire": {"description": "Event that is fired when a wire is removed\nYou can register this event with myTerminal.eventRemoveWire.subscribe(function(e,params) { var wire=params[0];}, scope);", "guessedname": "eventRemoveWire", "guessedtype": "property"}, "eventAddWire": {"description": "Event that is fired when a wire is added\nYou can register this event with myTerminal.eventAddWire.subscribe(function(e,params) { var wire=params[0];}, scope);", "guessedname": "eventAddWire", "guessedtype": "property"}}, "guessedname": "Container", "methods": {"setFocus": {"description": "Adds the class that shows the container as \"focused\"", "guessedname": "setFocus", "guessedtype": "function"}, "onCloseButton": {"description": "Called when the user clicked on the close button", "guessedname": "onCloseButton", "guessedtype": "function"}, "setBody": {"params": [{"type": "String or HTMLElement", "name": "content", "description": ""}], "description": "Sets the content of the body element", "guessedname": "setBody", "guessedtype": "function"}, "initTerminals": {"description": "Call the addTerminal method for each terminal configuration.", "guessedname": "initTerminals", "guessedtype": "function"}, "removeAllTerminals": {"description": "Remove all terminals", "guessedname": "removeAllTerminals", "guessedtype": "function"}, "render": {"description": "Render the dom of the container", "guessedname": "render", "guessedtype": "function"}, "onRemoveWire": {"params": [{"type": "Event", "name": "event", "description": " The eventRemoveWire event fired by the terminal"}, {"type": "Array", "name": "args", "description": " This array contains a single element args[0] which is the removed Wire instance"}], "description": "This method is called when a wire is removed from one of the terminals", "guessedname": "onRemoveWire", "guessedtype": "function"}, "removeFocus": {"description": "Remove the class that shows the container as \"focused\"", "guessedname": "removeFocus", "guessedtype": "function"}, "redrawAllTerminals": {"description": "Redraw all the wires connected to the terminals of this container", "guessedname": "redrawAllWires", "guessedtype": "function"}, "remove": {"description": "Remove this container from the dom", "guessedname": "remove", "guessedtype": "function"}, "onMouseDown": {"description": "Called when the user made a mouse down on the container and sets the focus to this container (only if within a Layer)", "guessedname": "onMouseDown", "guessedtype": "function"}, "setOptions": {"description": "set the options", "guessedname": "setOptions", "guessedtype": "function"}, "getTerminal": {"guessedname": "getTerminal", "guessedtype": "function"}, "getValue": {"return": {"type": "Object", "description": "value"}, "description": "Subclasses should override this method.", "guessedname": "getValue", "guessedtype": "function"}, "addTerminal": {"return": {"type": "WireIt.Terminal", "description": "terminal Created terminal"}, "description": "Instanciate the terminal from the class pointer \"xtype\" (default WireIt.Terminal)", "guessedname": "addTerminal", "guessedtype": "function"}, "getConfig": {"description": "Return the config of this container.", "guessedname": "getConfig", "guessedtype": "function"}, "onResize": {"description": "Function called when the container is being resized.\nIt doesn't do anything, so please override it.", "guessedname": "onResize", "guessedtype": "function"}, "setValue": {"params": [{"type": "Any", "name": "val", "description": " Value"}], "description": "Subclasses should override this method.", "guessedname": "setValue", "guessedtype": "function"}, "onAddWire": {"params": [{"type": "Event", "name": "event", "description": " The eventAddWire event fired by the terminal"}, {"type": "Array", "name": "args", "description": " This array contains a single element args[0] which is the added Wire instance"}], "description": "This method is called when a wire is added to one of the terminals", "guessedname": "onAddWire", "guessedtype": "function"}}, "file": "Container.js", "guessedtype": "function", "shortname": "Container", "properties": {"el": {"type": "{HTMLElement}", "description": "Container DOM element", "guessedname": "el", "guessedtype": "property"}, "layer": {"type": "{WireIt.Layer}", "description": "the WireIt.Layer object that schould contain this container", "guessedname": "layer", "guessedtype": "property"}, "wires": {"type": "{Array}", "description": "List of all the wires connected to this container terminals", "guessedname": "wires", "guessedtype": "property"}, "bodyEl": {"type": "{HTMLElement}", "description": "Body element", "guessedname": "bodyEl", "guessedtype": "property"}, "terminals": {"type": "{Array}", "description": "List of the terminals", "guessedname": "terminals", "guessedtype": "property"}, "options": {"type": "{Object}", "description": "Main options object\n<ul>\n<li>terminals: list of the terminals configuration</li>\n<li>draggable: boolean that enables drag'n drop on this container (default: true)</li>\n<li>className: CSS class name for the container element (default 'WireIt-Container')</li>\n<li>position: initial position of the container</li>\n<li>ddHandle: (only if draggable) boolean indicating we use a handle for drag'n drop (default true)</li>\n<li>ddHandleClassName: CSS class name for the drag'n drop handle (default 'WireIt-Container-ddhandle')</li>\n<li>resizable: boolean that makes the container resizable (default true)</li>\n<li>resizeHandleClassName: CSS class name for the resize handle (default 'WireIt-Container-resizehandle')</li>\n<li>width: initial width of the container (no default so it autoadjusts to the content)</li>\n<li>height: initial height of the container (default 100)</li>\n<li>close: display a button to close the container (default true)</li>\n<li>closeButtonClassName: CSS class name for the close button (default \"WireIt-Container-closebutton\")</li>\n<li>title: text that will appear in the module header</li>\n<li>icon: image url to be displayed in the module header</li>\n<li>preventSelfWiring: option to prevent connections between terminals of this same container (default true)</li>\n</ul>", "guessedname": "options", "guessedtype": "property"}}, "description": "Visual module that contains terminals. The wires are updated when the module is dragged around."}, "WireIt.ModuleProxy": {"name": "WireIt.ModuleProxy", "constructors": [{"params": [{"type": "HTMLElement", "name": "el", "description": ""}, {"type": "WireIt.WiringEditor", "name": "WiringEditor", "description": ""}], "description": "Module Proxy handle the drag/dropping from the module list to the layer (in the WiringEditor)"}], "namespace": "WireIt", "module": "WireIt", "guessedname": "ModuleProxy", "methods": {"onDragDrop": {"description": "Add the module to the WiringEditor on drop on layer", "guessedname": "onDragDrop", "guessedtype": "function"}, "startDrag": {"description": "copy the html and apply selected classes", "guessedname": "startDrag", "guessedtype": "function"}, "endDrag": {"description": "Override default behavior of DDProxy", "guessedname": "endDrag", "guessedtype": "function"}}, "file": "WiringEditor.js", "guessedtype": "function", "shortname": "ModuleProxy", "description": "Module Proxy handle the drag/dropping from the module list to the layer (in the WiringEditor)"}, "WireIt.util.DD": {"name": "WireIt.util.DD", "constructors": [{"params": [{"type": "Array", "name": "terminals", "description": " List of WireIt.Terminal objects associated within the DragDrop element"}, {"type": "String", "name": "id", "description": " Parameter of YAHOO.util.DD"}, {"type": "String", "name": "sGroup", "description": " Parameter of YAHOO.util.DD"}, {"type": "Object", "name": "config", "description": " Parameter of YAHOO.util.DD"}], "description": "WireIt.util.DD is a wrapper class for YAHOO.util.DD, to redraw the wires associated with the given terminals while drag-dropping"}], "namespace": "WireIt.util", "module": "WireIt", "guessedname": "DD", "methods": {"onDrag": {"description": "Override YAHOO.util.DD.prototype.onDrag to redraw the wires", "guessedname": "onDrag", "guessedtype": "function"}, "setTerminals": {"description": "In case you change the terminals since you created the WireIt.util.DD:", "guessedname": "setTerminals", "guessedtype": "function"}}, "extends": "YAHOO.util.DD", "superclass": "YAHOO.util.DD", "file": "DD.js", "guessedtype": "function", "shortname": "DD", "properties": {"_WireItTerminals": {"type": "{Array}", "description": "List of the contained terminals", "guessedname": "_WireItTerminals", "guessedtype": "property"}}, "description": "WireIt.util.DD is a wrapper class for YAHOO.util.DD, to redraw the wires associated with the given terminals while drag-dropping"}, "WireIt.CanvasElement": {"name": "WireIt.CanvasElement", "constructors": [{"params": [{"type": "HTMLElement", "name": "parentNode", "description": " The canvas tag will be append to this parent DOM node."}], "description": "Create a canvas element and wrap cross-browser hacks to resize it"}], "namespace": "WireIt", "module": "WireIt", "guessedname": "CanvasElement", "methods": {"destroy": {"description": "Purge all event listeners and remove the component from the dom", "guessedname": "destroy", "guessedtype": "function"}, "SetCanvasRegion": {"params": [{"type": "Number", "name": "left", "description": " Left position"}, {"type": "Number", "name": "top", "description": " Top position"}, {"type": "Number", "name": "width", "description": " New width"}, {"type": "Number", "name": "height", "description": " New height"}], "description": "Set the canvas position and size.\n<b>Warning:</b> This method changes the <i>element</i> property under some brother. Don't copy references !", "guessedname": "SetCanvasRegion", "guessedtype": "property"}, "getContext": {"return": {"type": "CanvasContext", "description": "the context"}, "params": [{"type": "String", "name": "[mode]", "description": " Context mode (default \"2d\")"}], "description": "Get a drawing context", "guessedname": "getContext", "guessedtype": "function"}}, "file": "CanvasElement.js", "guessedtype": "function", "shortname": "CanvasElement", "properties": {"element": {"type": "HTMLElement", "description": "The canvas element", "guessedname": "element", "guessedtype": "property"}}, "description": "Create a canvas element and wrap cross-browser hacks to resize it"}, "inputEx.BaseField": {"name": "inputEx.BaseField", "namespace": "inputEx", "module": "WireIt", "guessedname": "BaseField", "file": "WirableField-beta.js", "guessedtype": "property", "shortname": "BaseField", "description": "Copy of the original inputEx.Field class that we're gonna override to extend it."}, "WireIt.ImageContainer": {"name": "WireIt.ImageContainer", "constructors": [{"params": [{"type": "Object", "name": "options", "description": ""}, {"type": "WireIt.Layer", "name": "layer", "description": ""}], "description": "Container represented by an image"}], "namespace": "WireIt", "module": "WireIt", "guessedname": "ImageContainer", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " the options object"}], "guessedname": "setOptions", "guessedtype": "function"}, "render": {"guessedname": "render", "guessedtype": "function"}}, "extends": "WireIt.Container", "superclass": "WireIt.Container", "file": "ImageContainer.js", "guessedtype": "function", "shortname": "ImageContainer", "description": "Container represented by an image"}, "WireIt.Scissors": {"name": "WireIt.Scissors", "constructors": [{"params": [{"type": "WireIt.Terminal", "name": "terminal", "description": " Associated terminal"}, {"type": "Object", "name": "oConfigs", "description": ""}], "description": "Scissors widget to cut wires"}], "namespace": "WireIt", "module": "WireIt", "guessedname": "Scissors", "methods": {"hide": {"guessedname": "hide", "guessedtype": "function"}, "show": {"guessedname": "show", "guessedtype": "function"}, "scissorClick": {"guessedname": "scissorClick", "guessedtype": "function"}, "initScissors": {"description": "Init the scissors", "guessedname": "initScissors", "guessedtype": "function"}, "setPosition": {"guessedname": "setPosition", "guessedtype": "function"}, "mouseOver": {"guessedname": "mouseOver", "guessedtype": "function"}, "hideNow": {"guessedname": "hideNow", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.util.Element", "file": "Terminal.js", "guessedtype": "function", "shortname": "Scissors", "properties": {"_terminal": {"type": "{WireIt.Terminal}", "description": "The terminal it is associated to", "guessedname": "_terminal", "guessedtype": "property"}}, "description": "Scissors widget to cut wires"}, "WireIt.util.TerminalOutput": {"name": "WireIt.util.TerminalOutput", "constructors": [{"params": [{"type": "HTMLElement", "name": "parentEl", "description": " Parent dom element"}, {"type": "Object", "name": "options", "description": " configuration object"}, {"type": "WireIt.Container", "name": "container", "description": " (Optional) Container containing this terminal"}], "description": "Class that extends Terminal to differenciate Input/Output terminals"}], "namespace": "WireIt", "module": "WireIt", "guessedname": "TerminalOutput", "methods": {"setOptions": {"description": "Override setOptions to add the default options for TerminalOutput", "guessedname": "setOptions", "guessedtype": "function"}}, "extends": "WireIt.Terminal", "superclass": "WireIt.Terminal", "file": "Terminal.js", "guessedtype": "function", "shortname": "util.TerminalOutput", "description": "Class that extends Terminal to differenciate Input/Output terminals"}, "WireIt.WiringEditor": {"name": "WireIt.WiringEditor", "constructors": [{"params": [{"type": "Object", "name": "options", "description": ""}], "description": "The WiringEditor class provides a full page interface"}], "namespace": "WireIt", "module": "WireIt", "guessedname": "WiringEditor", "methods": {"load": {"guessedname": "load", "guessedtype": "function"}, "renderAccordion": {"description": "Render the accordion using yui-accordion", "guessedname": "renderAccordion", "guessedtype": "function"}, "onNew": {"guessedname": "onNew", "guessedtype": "function"}, "renderPropertiesForm": {"description": "Render the properties form", "guessedname": "renderPropertiesForm", "guessedtype": "function"}, "renderButtons": {"description": "Toolbar", "guessedname": "renderButtons", "guessedtype": "function"}, "onLoadSuccess": {"guessedname": "onLoadSuccess", "guessedtype": "function"}, "renderLoadPanel": {"guessedname": "renderLoadPanel", "guessedtype": "function"}, "onSave": {"guessedname": "onSave", "guessedtype": "function"}, "getPipeByName": {"return": {"type": "Object", "description": "return the evaled json pipe configuration"}, "params": [{"type": "String", "name": "name", "description": " Pipe's name"}], "guessedname": "getPipeByName", "guessedtype": "function"}, "saveModuleFailure": {"description": "saveModule failure callback", "guessedname": "saveModuleFailure", "guessedtype": "function"}, "updateLoadPanelList": {"guessedname": "updateLoadPanelList", "guessedtype": "function"}, "addModule": {"description": "add a module at the given pos", "guessedname": "addModule", "guessedtype": "function"}, "onHelp": {"description": "Create a help panel", "guessedname": "onHelp", "guessedtype": "function"}, "addModuleToList": {"description": "Add a module definition to the left list", "guessedname": "addModuleToList", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": ""}], "guessedname": "setOptions", "guessedtype": "function"}, "inputFilterTimer": {"description": "Method called from each keyup on the search filter in load panel.\nThe real filtering occurs only after 500ms so that the filter process isn't called too often", "guessedname": "inputFilterTimer", "guessedtype": "function"}, "saveModuleSuccess": {"description": "saveModule success callback", "guessedname": "saveModuleSuccess", "guessedtype": "function"}, "onDelete": {"guessedname": "onDelete", "guessedtype": "function"}, "saveModule": {"description": "save the current module", "guessedname": "saveModule", "guessedtype": "function"}, "getValue": {"description": "This method return a wiring within the given vocabulary described by the modules list", "guessedname": "getValue", "guessedtype": "function"}, "loadPipe": {"params": [{"type": "String", "name": "name", "description": " Pipe name"}], "guessedname": "loadPipe", "guessedtype": "function"}, "renderSavedStatus": {"guessedname": "renderSavedStatus", "guessedtype": "function"}, "buildModulesList": {"description": "Build the left menu on the left", "guessedname": "buildModulesList", "guessedtype": "function"}}, "file": "WiringEditor.js", "guessedtype": "function", "shortname": "WiringEditor", "properties": {"helpPanel": {"type": "{YAHOO.widget.Panel}", "guessedname": "helpPanel", "guessedtype": "property"}, "el": {"description": "Container DOM element", "guessedname": "el", "guessedtype": "property"}, "layer": {"type": "{WireIt.Layer}", "guessedname": "layer", "guessedtype": "property"}, "layout": {"type": "{YAHOO.widget.Layout}", "guessedname": "layout", "guessedtype": "property"}, "adapters": {"static": "", "description": "WiringEditor Adapters", "guessedname": "adapters", "guessedtype": "property"}, "Ajax": {"static": "", "description": "Ajax Adapter. Expect JSON response for all queries.", "guessedname": "Ajax", "guessedtype": "property"}, "Gears": {"static": "", "description": "Gears Adapter (using http://gears.google.com)", "guessedname": "Gears", "guessedtype": "property"}, "leftEl": {"type": "{DOMElement}", "guessedname": "leftEl", "guessedtype": "property"}, "JsonRpc": {"static": "", "description": "JsonRpc Adapter (using ajax)", "guessedname": "JsonRpc", "guessedtype": "property"}, "config": {"description": "You can configure this adapter to different schemas.\nurl can be functions !", "guessedname": "config", "guessedtype": "property"}, "modulesByName": {"type": "{Object}", "description": "Hash object to reference module definitions by their name", "guessedname": "modulesByName", "guessedtype": "property"}, "options": {"type": "{Object}", "guessedname": "options", "guessedtype": "property"}, "alertPanel": {"type": "{YAHOO.widget.Panel}", "guessedname": "alertPanel", "guessedtype": "property"}}, "description": "The WiringEditor class provides a full page interface"}, "WireIt.Layer": {"name": "WireIt.Layer", "constructors": [{"params": [{"type": "Object", "name": "options", "description": "   Configuration object (see the properties)"}], "description": "A layer encapsulate a bunch of containers and wires"}], "namespace": "WireIt", "module": "WireIt", "events": {"eventAddContainer": {"description": "Event that is fired when a container is added\nYou can register this event with myTerminal.eventAddContainer.subscribe(function(e,params) { var container=params[0];}, scope);", "guessedname": "eventAddContainer", "guessedtype": "property"}, "eventAddWire": {"description": "Event that is fired when a wire is added\nYou can register this event with myTerminal.eventAddWire.subscribe(function(e,params) { var wire=params[0];}, scope);", "guessedname": "eventAddWire", "guessedtype": "property"}, "eventRemoveWire": {"description": "Event that is fired when a wire is removed\nYou can register this event with myTerminal.eventRemoveWire.subscribe(function(e,params) { var wire=params[0];}, scope);", "guessedname": "eventRemoveWire", "guessedtype": "property"}, "eventContainerDragged": {"description": "Event that is fired when a container has been moved\nYou can register this event with myTerminal.eventContainerDragged.subscribe(function(e,params) { var container=params[0];}, scope);", "guessedname": "eventContainerDragged", "guessedtype": "property"}, "eventContainerResized": {"description": "Event that is fired when a container has been resized\nYou can register this event with myTerminal.eventContainerResized.subscribe(function(e,params) { var container=params[0];}, scope);", "guessedname": "eventContainerResized", "guessedtype": "property"}, "eventChanged": {"description": "Event that is fired when the layer has been changed\nYou can register this event with myTerminal.eventChanged.subscribe(function(e,params) { }, scope);", "guessedname": "eventChanged", "guessedtype": "property"}, "eventRemoveContainer": {"description": "Event that is fired when a container is removed\nYou can register this event with myTerminal.eventRemoveContainer.subscribe(function(e,params) { var container=params[0];}, scope);", "guessedname": "eventRemoveContainer", "guessedtype": "property"}}, "guessedname": "Layer", "methods": {"setWiring": {"params": [{"type": "Object", "name": "wiring", "description": " layer configuration"}], "description": "Load a layer configuration object", "guessedname": "setWiring", "guessedtype": "function"}, "initWires": {"description": "Create all the wires passed in the config", "guessedname": "initWires", "guessedtype": "function"}, "render": {"description": "Create the dom of the layer and insert it into the parent element", "guessedname": "render", "guessedtype": "function"}, "onRemoveWire": {"params": [{"type": "Event", "name": "event", "description": " The eventRemoveWire event fired by the container"}, {"type": "Array", "name": "args", "description": " This array contains a single element args[0] which is the removed Wire instance"}], "description": "Update the wire list when a wire is removed", "guessedname": "onRemoveWire", "guessedtype": "function"}, "removeContainer": {"params": [{"type": "WireIt.Container", "name": "container", "description": " Container instance to remove"}], "description": "Remove a container", "guessedname": "removeContainer", "guessedtype": "function"}, "onWireMouseMove": {"params": [{"type": "Event", "name": "e", "description": " Mouse click event"}], "description": "Handles mousemove events on any wire canvas\nNote: we treat mouse events globally so that wires behind others can still receive the events", "guessedname": "onWireMouseMove", "guessedtype": "function"}, "setOptions": {"guessedname": "setOptions", "guessedtype": "function"}, "removeAllContainers": {"deprecated": "", "description": "Alias for clear", "guessedname": "removeAllContainers", "guessedtype": "function"}, "clearExplode": {"description": "Layer explosing animation", "guessedname": "clearExplode", "guessedtype": "function"}, "addWire": {"return": {"type": "WireIt.Wire", "description": "Wire instance build from the xtype"}, "params": [{"type": "Object", "name": "wireConfig", "description": "  Wire configuration object (see WireIt.Wire class for details)"}], "description": "Instanciate a wire given its \"xtype\" (default to WireIt.Wire)", "guessedname": "addWire", "guessedtype": "function"}, "addContainer": {"return": {"type": "WireIt.Container", "description": "Container instance build from the xtype"}, "params": [{"type": "Object", "name": "containerConfig", "description": "  Container configuration object (see WireIt.Container class for details)"}], "description": "Instanciate a container given its \"xtype\": WireIt.Container (default) or a subclass of it.", "guessedname": "addContainer", "guessedtype": "function"}, "onWireClick": {"params": [{"type": "Event", "name": "e", "description": " Mouse click event"}], "description": "Handles click on any wire canvas\nNote: we treat mouse events globally so that wires behind others can still receive the events", "guessedname": "onWireClick", "guessedtype": "function"}, "_getMouseEvtPos": {"return": {"type": "Array", "description": "position"}, "params": [{"type": "Event", "name": "e", "description": " Mouse event"}], "description": "Returns a position relative to the layer from a mouse event", "guessedname": "_getMouseEvtPos", "guessedtype": "function"}, "initContainers": {"description": "Create all the containers passed as options", "guessedname": "initContainers", "guessedtype": "function"}, "clear": {"description": "Remove all the containers in this layer (and the associated terminals and wires)", "guessedname": "clear", "guessedtype": "function"}, "onAddWire": {"params": [{"type": "Event", "name": "event", "description": " The eventAddWire event fired by the container"}, {"type": "Array", "name": "args", "description": " This array contains a single element args[0] which is the added Wire instance"}], "description": "Update the wire list when any of the containers fired the eventAddWire", "guessedname": "onAddWire", "guessedtype": "function"}, "getWiring": {"return": {"type": "Obj", "description": "layer configuration"}, "description": "Return an object that represent the state of the layer including the containers and the wires", "guessedname": "getWiring", "guessedtype": "function"}}, "file": "Layer.js", "guessedtype": "function", "shortname": "Layer", "properties": {"el": {"type": "{HTMLElement}", "description": "Layer DOM element", "guessedname": "el", "guessedtype": "property"}, "wires": {"type": "{Array}", "description": "List of all the WireIt.Wire (or subclass) instances in this layer", "guessedname": "wires", "guessedtype": "property"}, "options": {"description": "Configuration object of the layer\n<ul>\n<li>className: CSS class name for the layer element (default 'WireIt-Layer')</li>\n<li>parentEl: DOM element that schould contain the layer (default document.body)</li>\n<li>containers: array of container configuration objects</li>  \n<li>wires: array of wire configuration objects</li>\n<li>layerMap: boolean</li>\n<li>layerMapOptions: layer map options</li>\n</ul>", "guessedname": "options", "guessedtype": "property"}, "containers": {"type": "{Array}", "description": "List of all the WireIt.Container (or subclass) instances in this layer", "guessedname": "containers", "guessedtype": "property"}}, "description": "A layer encapsulate a bunch of containers and wires"}, "WireIt.LayerMap": {"name": "WireIt.LayerMap", "constructors": [{"params": [{"type": "WireIt.Layer", "name": "layer", "description": " the layer object it is attached to"}, {"type": "Obj", "name": "options", "description": " configuration object"}], "description": "Widget to display a minimap on a layer"}], "namespace": "WireIt", "module": "WireIt", "guessedname": "LayerMap", "methods": {"stopDynamicLayout": {"description": "Stop the dynamic layout", "guessedname": "stopDynamicLayout", "guessedtype": "function"}, "draw": {"description": "Redraw the layer map", "guessedname": "draw", "guessedtype": "function"}, "scrollLayer": {"params": [{"type": "Integer", "name": "clientX", "description": " mouse event x coordinate"}, {"type": "Integer", "name": "clientY", "description": " mouse event y coordinate"}], "description": "Scroll the layer from mousedown/mousemove", "guessedname": "scrollLayer", "guessedtype": "function"}, "initEvents": {"description": "Listen for various events that should redraw the layer map", "guessedname": "initEvents", "guessedtype": "function"}, "Spring": {"description": "Spring Layout\nTODO: use different eges k", "guessedname": "Spring", "guessedtype": "function"}, "drawContainers": {"description": "Subroutine to draw the containers", "guessedname": "drawContainers", "guessedtype": "function"}, "startDynamicLayout": {"description": "Start a dynamic layout", "guessedname": "startDynamicLayout", "guessedtype": "function"}, "onMouseDown": {"params": [{"type": "Event", "name": "e", "description": " Original event"}, {"type": "Array", "name": "args", "description": " event parameters"}], "description": "When a mouse down is received", "guessedname": "onMouseDown", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": ""}], "guessedname": "setOptions", "guessedtype": "function"}, "onMouseMove": {"params": [{"type": "Event", "name": "e", "description": " Original event"}, {"type": "Array", "name": "args", "description": " event parameters"}], "description": "When a mouse move is received", "guessedname": "onMouseMove", "guessedtype": "function"}, "drawWires": {"description": "Subroutine to draw the wires", "guessedname": "drawWires", "guessedtype": "function"}, "onMouseUp": {"params": [{"type": "Event", "name": "e", "description": " Original event"}, {"type": "Array", "name": "args", "description": " event parameters"}], "description": "When a mouseup or mouseout is received", "guessedname": "onMouseUp", "guessedtype": "function"}, "onLayerScroll": {"description": "Redraw after a timeout", "guessedname": "onLayerScroll", "guessedtype": "function"}, "layoutAnim": {"description": "Calculate the new position for the given layout and animate the layer to this position", "guessedname": "layoutAnim", "guessedtype": "function"}}, "extends": "WireIt.CanvasElement", "superclass": "WireIt.CanvasElement", "file": "LayerMap.js", "guessedtype": "function", "shortname": "LayerMap", "properties": {"layer": {"guessedname": "layer", "guessedtype": "property"}, "options": {"description": "Options:\n<ul>\n<li>parentEl: parent element (defaut layer.el)</li>\n<li>className: default to \"WireIt-LayerMap\"</li>\n<li>style: display style, default to \"rgba(0, 0, 200, 0.5)\"</li>\n<li>lineWidth: default 2</li>\n</ul>", "guessedname": "options", "guessedtype": "property"}}, "description": "Widget to display a minimap on a layer"}, "WireIt.WireIt": {"name": "WireIt.WireIt", "namespace": "WireIt", "module": "WireIt", "guessedname": "WireIt", "static": "", "file": "WireIt.js", "guessedtype": "property", "shortname": "WireIt", "properties": {"util": {"description": "WireIt.util contains utility classes", "guessedname": "util", "guessedtype": "property"}}, "methods": {"indexOf": {"return": {"type": "Integer", "description": "element index or -1 if not found"}, "description": "indexOf replace Array.indexOf for cases where it isn't available (IE6 only ?)", "static": "", "guessedname": "indexOf", "guessedtype": "property", "params": [{"type": "Any", "name": "el", "description": " element to search for"}, {"type": "Array", "name": "arr", "description": " Array to search into"}]}, "getIntStyle": {"return": {"type": "Integer", "description": "integer size"}, "description": "Get a css property in pixels and convert it to an integer", "static": "", "guessedname": "getIntStyle", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": " The element"}, {"type": "String", "name": "style", "description": " css-property to get"}]}, "compact": {"return": {"type": "Array", "description": "compacted array"}, "description": "compact replace Array.compact for cases where it isn't available", "static": "", "guessedname": "compact", "guessedtype": "property", "params": [{"type": "Array", "name": "arr", "description": " Array to compact"}]}, "sn": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": " The element to set attributes to"}, {"type": "Object} domAttributes An object containing key/value pairs to set as node attributes (ex: {id: 'myElement', className: 'myCssClass', ...", "name": ")", "description": ""}, {"type": "Object", "name": "styleAttributes", "description": " Same thing for style attributes. Please use camelCase for style attributes (ex: backgroundColor for 'background-color')"}], "description": "Helper function to set DOM node attributes and style attributes.", "guessedname": "sn", "guessedtype": "function"}, "cn": {"return": {"type": "HTMLElement", "description": "The created node"}, "description": "Helper function to create a DOM node. (wrapps the document.createElement tag and the inputEx.sn functions)", "static": "", "guessedname": "cn", "guessedtype": "function", "params": [{"type": "String", "name": "tag", "description": " The tagName to create (ex: 'div', 'a', ...)"}, {"type": "Object", "name": "[domAttributes]", "description": " see inputEx.sn"}, {"type": "Object", "name": "[styleAttributes]", "description": " see inputEx.sn"}, {"type": "String", "name": "[innerHTML]", "description": " The html string to append into the created element"}]}}}, "WireIt.InOutContainer": {"name": "WireIt.InOutContainer", "constructors": [{"params": [{"type": "Object", "name": "options", "description": ""}, {"type": "WireIt.Layer", "name": "layer", "description": ""}], "description": "Container with left inputs and right outputs"}], "namespace": "WireIt", "module": "WireIt", "guessedname": "InOutContainer", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " the options object"}], "guessedname": "setOptions", "guessedtype": "function"}}, "extends": "WireIt.Container", "superclass": "WireIt.Container", "file": "InOutContainer.js", "guessedtype": "function", "shortname": "InOutContainer", "description": "Container with left inputs and right outputs"}, "WireIt.Wire": {"name": "WireIt.Wire", "constructors": [{"params": [{"type": "WireIt.Terminal", "name": "terminal1", "description": "   Source terminal"}, {"type": "WireIt.Terminal", "name": "terminal2", "description": "   Target terminal"}, {"type": "HTMLElement", "name": "parentEl", "description": "    Container of the CANVAS tag"}, {"type": "Obj", "name": "options", "description": "      Wire configuration (see options property)"}], "description": "The wire widget that uses a canvas to render"}], "namespace": "WireIt", "module": "WireIt", "events": {"eventMouseClick": {"description": "Event that is fired when a wire is clicked (on the wire, not the canvas)\nYou can register this event with myWire.eventWireClick.subscribe(function(e,params) { var wire = params[0], xy = params[1];}, scope);", "guessedname": "eventMouseClick", "guessedtype": "property"}, "eventMouseMove": {"description": "Event that is fired when the mouse moves inside the wire\nYou can register this event with myWire.eventMouseMove.subscribe(function(e,params) { var wire = params[0], xy = params[1];}, scope);", "guessedname": "eventMouseMove", "guessedtype": "property"}, "eventMouseOut": {"description": "Event that is fired when the mouse exits the wire\nYou can register this event with myWire.eventMouseOut.subscribe(function(e,params) { var wire = params[0], xy = params[1];}, scope);", "guessedname": "eventMouseOut", "guessedtype": "property"}, "eventMouseIn": {"description": "Event that is fired when the mouse enter the wire\nYou can register this event with myWire.eventMouseIn.subscribe(function(e,params) { var wire = params[0], xy = params[1];}, scope);", "guessedname": "eventMouseIn", "guessedtype": "property"}}, "guessedname": "Wire", "methods": {"drawBezierCurve": {"description": "Redraw the Wire", "guessedname": "drawBezierCurve", "guessedtype": "function"}, "drawArrows": {"description": "Drawing methods for arrows", "guessedname": "drawArrows", "guessedtype": "function"}, "drawStraight": {"description": "Drawing method for arrows", "guessedname": "drawStraight", "guessedtype": "function"}, "onWireIn": {"params": [{"type": "Integer", "name": "x", "description": " left position of the mouse (relative to the canvas)"}, {"type": "Integer", "name": "y", "description": " top position of the mouse (relative to the canvas)"}], "description": "When the mouse comes into the wire\nNote: this will only work within a layer", "guessedname": "onWireIn", "guessedtype": "function"}, "getOtherTerminal": {"return": {"type": "WireIt.Terminal", "description": "terminal    the terminal that is NOT passed as argument"}, "params": [{"type": "WireIt.Terminal", "name": "terminal", "description": ""}], "description": "This function returns terminal1 if the first argument is terminal2 and vice-versa", "guessedname": "getOtherTerminal", "guessedtype": "function"}, "onWireClick": {"params": [{"type": "Integer", "name": "x", "description": " left position of the mouse (relative to the canvas)"}, {"type": "Integer", "name": "y", "description": " top position of the mouse (relative to the canvas)"}], "description": "When the mouse clicked on the wire\nNote: this will only work within a layer", "guessedname": "onWireClick", "guessedtype": "function"}, "remove": {"description": "Remove a Wire from the Dom", "guessedname": "remove", "guessedtype": "function"}, "setOptions": {"description": "Build options object and set default properties", "guessedname": "setOptions", "guessedtype": "function"}, "onMouseMove": {"params": [{"type": "Integer", "name": "x", "description": " left position of the mouse (relative to the canvas)"}, {"type": "Integer", "name": "y", "description": " top position of the mouse (relative to the canvas)"}], "description": "Called by the Layer when the mouse moves over the canvas element.\nNote: the event is not listened directly, to receive the event event if the wire is behind another wire", "guessedname": "onMouseMove", "guessedtype": "function"}, "drawBezierArrows": {"description": "Attempted bezier drawing method for arrows", "guessedname": "drawBezierArrows", "guessedtype": "function"}, "onClick": {"params": [{"type": "Integer", "name": "x", "description": " left position of the mouse (relative to the canvas)"}, {"type": "Integer", "name": "y", "description": " top position of the mouse (relative to the canvas)"}], "description": "When the mouse clicked on the canvas\nNote: this will only work within a layer", "guessedname": "onClick", "guessedtype": "function"}, "onWireOut": {"params": [{"type": "Integer", "name": "x", "description": " left position of the mouse (relative to the canvas)"}, {"type": "Integer", "name": "y", "description": " top position of the mouse (relative to the canvas)"}], "description": "When the mouse comes out of the wire\nNote: this will only work within a layer", "guessedname": "onWireOut", "guessedtype": "function"}, "onWireMove": {"params": [{"type": "Integer", "name": "x", "description": " left position of the mouse (relative to the canvas)"}, {"type": "Integer", "name": "y", "description": " top position of the mouse (relative to the canvas)"}], "description": "When the mouse moves over a wire\nNote: this will only work within a layer", "guessedname": "onWireMove", "guessedtype": "function"}, "redraw": {"description": "Redraw the canvas (according to the drawingMethod option)", "guessedname": "redraw", "guessedtype": "function"}, "wireDrawnAt": {"return": {"type": "Boolean", "description": "true if the wire is drawn at position (x,y) relative to the canvas element"}, "description": "Determine if the wire is drawn at position (x,y) relative to the canvas element. This is used for mouse events.", "guessedname": "wireDrawnAt", "guessedtype": "function"}}, "extends": "WireIt.CanvasElement", "superclass": "WireIt.CanvasElement", "file": "Wire.js", "guessedtype": "function", "shortname": "Wire", "properties": {"terminal1": {"type": "WireIt.Terminal", "description": "Source terminal", "guessedname": "terminal1", "guessedtype": "property"}, "parentEl": {"type": "HTMLElement", "description": "Reference to the parent dom element", "guessedname": "parentEl", "guessedtype": "property"}, "terminal2": {"type": "WireIt.Terminal || WireIt.TerminalProxy", "description": "Target terminal", "guessedname": "terminal2", "guessedtype": "property"}, "options": {"description": "Wire styling, and properties:\n<ul>\n<li>className: CSS class name of the canvas element (default 'WireIt-Wire')</li>\n<li>coeffMulDirection: Parameter for bezier style</li>\n<li>cap: default 'round'</li>\n<li>bordercap: default 'round'</li>\n<li>width: Wire width (default to 3)</li>\n<li>borderwidth: Border Width (default to 1)</li>\n<li>color: Wire color (default to rgb(173, 216, 230) )</li>\n<li>bordercolor: Border color (default to #0000ff )</li>\n</ul>", "guessedname": "options", "guessedtype": "property"}}, "description": "The wire widget that uses a canvas to render"}, "WireIt.util.Anim": {"name": "WireIt.util.Anim", "constructors": [{"params": [{"type": "Array", "name": "terminals", "description": " List of WireIt.Terminal objects associated within the animated element"}], "description": "WireIt.util.Anim is a wrapper class for YAHOO.util.Anim, to redraw the wires associated with the given terminals while running the animation."}], "namespace": "WireIt.util", "module": "WireIt", "guessedname": "Anim", "methods": {"moveWireItWires": {"description": "Listen YAHOO.util.Anim.onTween events to redraw the wires", "guessedname": "moveWireItWires", "guessedtype": "function"}, "setTerminals": {"params": [{"type": "Array", "name": "terminals", "description": ""}], "description": "In case you change the terminals since you created the WireIt.util.Anim:", "guessedname": "setTerminals", "guessedtype": "function"}}, "extends": "YAHOO.util.Anim", "superclass": "YAHOO.util.Anim", "file": "Anim.js", "guessedtype": "function", "params": "{String} id Parameter of YAHOO.util.Anim", "shortname": "Anim", "properties": {"_WireItTerminals": {"type": "{Array}", "description": "List of the contained terminals", "guessedname": "_WireItTerminals", "guessedtype": "property"}}, "description": "WireIt.util.Anim is a wrapper class for YAHOO.util.Anim, to redraw the wires associated with the given terminals while running the animation."}, "inputEx.Field": {"name": "inputEx.Field", "namespace": "inputEx", "module": "WireIt", "guessedname": "Field", "methods": {"setOptions": {"description": "Adds a wirable option to every field", "guessedname": "setOptions", "guessedtype": "function"}, "onAddWire": {"description": "Remove the input wired state on the", "guessedname": "onAddWire", "guessedtype": "function"}, "onRemoveWire": {"description": "Remove the input wired state on the", "guessedname": "onRemoveWire", "guessedtype": "function"}, "renderTerminal": {"description": "Render the associated input terminal", "guessedname": "renderTerminal", "guessedtype": "function"}, "render": {"description": "Adds a terminal to each field", "guessedname": "render", "guessedtype": "function"}}, "extends": "inputEx.BaseField", "superclass": "inputEx.BaseField", "file": "WirableField-beta.js", "guessedtype": "function", "shortname": "Field", "description": "Class to make inputEx Fields \"wirable\".Re-create inputEx.Field adding the wirable properties"}, "WireIt.Terminal": {"name": "WireIt.Terminal", "constructors": [{"params": [{"type": "HTMLElement", "name": "parentEl", "description": " Element that will contain the terminal"}, {"type": "Object", "name": "options", "description": " Configuration object"}, {"type": "WireIt.Container", "name": "container", "description": " (Optional) Container containing this terminal"}], "description": "Terminals represent the end points of the \"wires\""}], "namespace": "WireIt", "module": "WireIt", "events": {"eventRemoveWire": {"description": "Event that is fired when a wire is removed\nYou can register this event with myTerminal.eventRemoveWire.subscribe(function(e,params) { var wire=params[0];}, scope);", "guessedname": "eventRemoveWire", "guessedtype": "property"}, "eventAddWire": {"description": "Event that is fired when a wire is added\nYou can register this event with myTerminal.eventAddWire.subscribe(function(e,params) { var wire=params[0];}, scope);", "guessedname": "eventAddWire", "guessedtype": "property"}}, "guessedname": "Terminal", "methods": {"getXY": {"description": "This function is a temporary test. I added the border width while traversing the DOM and\nI calculated the offset to center the wire in the terminal just after its creation", "guessedname": "getXY", "guessedtype": "function"}, "setDropInvitation": {"params": [{"type": "Boolean", "name": "display", "description": " Show the invitation if true, hide it otherwise"}], "description": "Show or hide the drop invitation. (by adding/removing this.options.dropinviteClassName CSS class)", "guessedname": "setDropInvitation", "guessedtype": "function"}, "render": {"description": "Render the DOM of the terminal", "guessedname": "render", "guessedtype": "function"}, "getConnectedTerminals": {"return": {"type": "Array", "description": "List of all connected terminals"}, "description": "Returns a list of all the terminals connecter to this terminal through its wires.", "guessedname": "getConnectedTerminals", "guessedtype": "function"}, "remove": {"description": "Remove the terminal from the DOM", "guessedname": "remove", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": ""}], "guessedname": "setOptions", "guessedtype": "function"}, "redrawAllWires": {"description": "Redraw all the wires connected to this terminal", "guessedname": "redrawAllWires", "guessedtype": "function"}, "removeAllWires": {"description": "Remove all wires", "guessedname": "removeAllWires", "guessedtype": "function"}, "addWire": {"params": [{"type": "WireIt.Wire", "name": "wire", "description": " Wire instance to add"}], "description": "Add a wire to this terminal.", "guessedname": "addWire", "guessedtype": "function"}, "removeWire": {"params": [{"type": "WireIt.Wire", "name": "wire", "description": " Wire instance to remove"}], "description": "Remove a wire", "guessedname": "removeWire", "guessedtype": "function"}}, "file": "Terminal.js", "guessedtype": "function", "shortname": "Terminal", "properties": {"el": {"type": "{HTMLElement}", "description": "DIV dom element that will display the Terminal", "guessedname": "el", "guessedtype": "property"}, "parentEl": {"type": "{HTMLElement}", "description": "DOM parent element", "guessedname": "parentEl", "guessedtype": "property"}, "container": {"type": "{WireIt.Container}", "description": "Container (optional). Parent container of this terminal", "guessedname": "container", "guessedtype": "property"}, "options": {"description": "<p>Object that contains the terminal configuration:</p>\n<ul>\n<li><b>name</b>: terminal name</li>\n<li><b>direction</b>: direction vector of the wires when connected to this terminal (default [0,1])</li>\n<li><b>fakeDirection</b>: direction vector of the \"editing\" wire when it started from this terminal (default to -direction)</li>\n<li><b>editable</b>: boolean that makes the terminal editable (default to true)</li>\n<li><b>nMaxWires</b>: maximum number of wires for this terminal (default to Infinity)</li>\n<li><b>offsetPosition</b>: offset position from the parentEl position. Can be an array [top,left] or an object {left: 100, bottom: 20} or {right: 10, top: 5} etc... (default to [0,0])</li>\n<li><b>ddConfig</b>: configuration of the WireIt.TerminalProxy object (only if editable)</li>\n<li><b>alwaysSrc</b>: alwaysSrc forces this terminal to be the src terminal in the wire config (default false, only if editable)</li>\n<li><b>className</b>: CSS class name of the terminal (default to \"WireIt-Terminal\")</li>\n<li><b>connectedClassName</b>: CSS class added to the terminal when it is connected (default to \"WireIt-Terminal-connected\")</li>\n<li><b>dropinviteClassName</b>: CSS class added for drop invitation (default to \"WireIt-Terminal-dropinvite\")</li>\n</ul>", "guessedname": "options", "guessedtype": "property"}, "wires": {"type": "{Array}", "description": "List of the associated wires", "guessedname": "wires", "guessedtype": "property"}}, "description": "Terminals represent the end points of the \"wires\""}, "WireIt.FormContainer": {"name": "WireIt.FormContainer", "constructors": [{"params": [{"type": "Object", "name": "options", "description": "  Configuration object (see properties)"}, {"type": "WireIt.Layer", "name": "layer", "description": " The WireIt.Layer (or subclass) instance that contains this container"}], "description": "Class used to build a container with inputEx forms"}], "namespace": "WireIt", "module": "WireIt", "guessedname": "FormContainer", "methods": {"setValue": {"guessedname": "setValue", "guessedtype": "function"}, "render": {"description": "The render method is overrided to call renderForm", "guessedname": "render", "guessedtype": "function"}, "renderForm": {"description": "Render the form", "guessedname": "renderForm", "guessedtype": "function"}, "getValue": {"guessedname": "getValue", "guessedtype": "function"}, "setOptions": {"guessedname": "setOptions", "guessedtype": "function"}, "setBackReferenceOnFieldOptionsRecursively": {"description": "When creating wirable input fields, the field configuration (inputParams) must have a reference to the current container (this is used for positionning).\nFor complex fields (like object or list), the reference is set recursively AFTER the field creation.", "guessedname": "setBackReferenceOnFieldOptionsRecursively", "guessedtype": "function"}}, "extends": "WireIt.Container", "superclass": "WireIt.Container", "file": "FormContainer-beta.js", "guessedtype": "function", "shortname": "FormContainer", "description": "Class used to build a container with inputEx forms"}, "WireIt.util.TerminalInput": {"name": "WireIt.util.TerminalInput", "constructors": [{"params": [{"type": "HTMLElement", "name": "parentEl", "description": " Parent dom element"}, {"type": "Object", "name": "options", "description": " configuration object"}, {"type": "WireIt.Container", "name": "container", "description": " (Optional) Container containing this terminal"}], "description": "Class that extends Terminal to differenciate Input/Output terminals"}], "namespace": "WireIt", "module": "WireIt", "guessedname": "TerminalInput", "methods": {"setOptions": {"description": "Override setOptions to add the default options for TerminalInput", "guessedname": "setOptions", "guessedtype": "function"}}, "extends": "WireIt.Terminal", "superclass": "WireIt.Terminal", "file": "Terminal.js", "guessedtype": "function", "shortname": "util.TerminalInput", "description": "Class that extends Terminal to differenciate Input/Output terminals"}, "WireIt.TerminalProxy": {"name": "WireIt.TerminalProxy", "constructors": [{"params": [{"type": "WireIt.Terminal", "name": "terminal", "description": " Parent terminal"}, {"type": "Object", "name": "options", "description": " Configuration object (see \"termConfig\" property for details)"}], "description": "This class is used for wire edition. It inherits from YAHOO.util.DDProxy and acts as a \"temporary\" Terminal."}], "namespace": "WireIt", "module": "WireIt", "guessedname": "TerminalProxy", "methods": {"createFrame": {"description": "Took this method from the YAHOO.util.DDProxy class\nto overwrite the creation of the proxy Element with our custom size", "guessedname": "createFrame", "guessedtype": "function"}, "startDrag": {"guessedname": "startDrag", "guessedtype": "function"}, "endDrag": {"guessedname": "endDrag", "guessedtype": "function"}, "onDragOut": {"guessedname": "onDragOut", "guessedtype": "function"}, "isValidWireTerminal": {"guessedname": "isValidWireTerminal", "guessedtype": "function"}, "onDragDrop": {"guessedname": "onDragDrop", "guessedtype": "function"}, "onDrag": {"guessedname": "onDrag", "guessedtype": "function"}, "onDragEnter": {"guessedname": "onDragEnter", "guessedtype": "function"}}, "extends": "YAHOO.util.DDProxy", "superclass": "YAHOO.util.DDProxy", "file": "Terminal.js", "guessedtype": "function", "shortname": "TerminalProxy", "properties": {"terminal": {"description": "Reference to the terminal parent", "guessedname": "terminal", "guessedtype": "property"}, "fakeTerminal": {"description": "Object that emulate a terminal which is following the mouse", "guessedname": "fakeTerminal", "guessedtype": "property"}, "termConfig": {"description": "Object containing the configuration object\n<ul>\n<li>type: 'type' of this terminal. If no \"allowedTypes\" is specified in the options, the terminal will only connect to the same type of terminal</li>\n<li>allowedTypes: list of all the allowed types that we can connect to.</li>\n<li>{Integer} terminalProxySize: size of the drag drop proxy element. default is 10 for \"10px\"</li>\n</ul>"}}, "description": "This class is used for wire edition. It inherits from YAHOO.util.DDProxy and acts as a \"temporary\" Terminal."}, "WireIt.util.DDResize": {"name": "WireIt.util.DDResize", "constructors": [{"params": [{"type": "WireIt.Container", "name": "container", "description": " The container that is to be resizable"}, {"type": "Object", "name": "config", "description": " Configuration object"}], "description": "Make a container resizable"}], "namespace": "WireIt.util", "module": "WireIt", "events": {"eventResize": {"description": "The event fired when the container is resized", "guessedname": "eventResize", "guessedtype": "property"}}, "guessedname": "DDResize", "methods": {"onDrag": {"guessedname": "onDrag", "guessedtype": "function"}, "onMouseDown": {"guessedname": "onMouseDown", "guessedtype": "function"}}, "extends": "YAHOO.util.DragDrop", "superclass": "YAHOO.util.DragDrop", "file": "DDResize.js", "guessedtype": "function", "shortname": "DDResize", "properties": {"myConf": {"description": "Configuration object\n<ul>\n<li>minWidth: minimum width (default 50)</li>\n<li>minHeight: minimum height (default 50)</li>\n</ul>"}}, "description": "Make a container resizable"}}, "version": "0.5.0", "namespaces": ["WireIt", "WireIt.util", "inputEx"]}